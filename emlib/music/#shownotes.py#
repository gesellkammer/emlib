#!/usr/bin/env python3
import liblo
from em.comp import music
from em.comp import combtones
from em.pitch import m2f, f2m, m2n, n2m
import subprocess
import tempfile
import os
# import music21 as m21

DEFAULTPORT = 90109
_DEFAULTSERVER = None

def getserver():
    global _DEFAULTSERVER
    if DEFAULTSERVER is None:
        DEFAULTSERVER = NoteServer()
    return DEFAULTSERVER

def _asmidi(seq):
    if isinstance(seq[0], str):
        seq = [n2m(p) for p in seq]
    seq = [p for p in seq if p > 0]
    return seq


def showchord(pitches):
    pitches = _asmidi(pitches)
    getserver().showchord(pitches)

def showchords(chords):
    chords = [_asmidi(chord) for chord in chords]
    getserver().showchords(chords)

def showdifftones(pitches):
    pitches = _asmidi(pitches)
    return getserver().showdifftones(pitches)


class NoteServer:
    def __init__(self, port=DEFAULTPORT, verbose=True):
        self.port = port
        self.imgproc = None
        fd, path = tempfile.mkstemp(prefix="shownotes-", suffix=".png")
        self.imgfile = path
        self.imgbase = os.path.splitext(self.imgfile)[0]
        self.verbose = verbose

    def showm21(self, stream):
        stream.write("lily.png", self.imgbase)
        if self.imgproc is None or self.imgproc.poll() is not None:
            self.imgproc = subprocess.Popen(["feh", "--reload", "0.5", self.imgbase+".png"])    

    def cmd_chord(self, path, args, types):
        pitches = args
        self.showchord(pitches)
        
    def cmd_difftones(self, path, args, types):
        pitches = args
        self.showdifftones(pitches)
        
    def showdifftones(self, pitches):
        pitches = [p for p in pitches if p > 0]
        freqs = combtones.difftones(*[m2f(p) for p in pitches])
        freqs = [max(f, 1) for f in freqs]
        diffpitches = [f2m(f) for f in freqs]
        self.showchords([pitches, diffpitches])
        if self.verbose:
            print_chord(diffpitches, label="Difference Tones")
        
    def showchord(self, pitches):
        pitches = [p for p in pitches if p > 0]
        chord = music.Chord(pitches)
        m = chord.asmusic21(split=True)
        self.showm21(m)

    def showchords(self, chords):
        """ each chord is a list of pitches """
        m = music.splitchords([music.Chord(chord) for chord in chords])
        self.showm21(m)
    
    def serve(self):
        s = liblo.Server(self.port)
        s.add_method("/chord", None, self.cmd_chord)
        s.add_method("/difftones", None, self.cmd_difftones)    
        while True:
            s.recv(50)

            
def print_chord(chord, label=None):
    print()
    if label is not None:
        print(label)
        print()
    import tabulate
    chord = sorted(chord, reverse=True)
    rows = [[m2n(p), p, m2f(p)] for p in chord]
    s = tabulate.tabulate(rows)
    print(s)

    
def serve(port=DEFAULTPORT, verbose=True):
    server = NoteServer(port=port, verbose=verbose)
    server.serve()
    
if __name__ == "__main__":
    serve(verbose=True)
    
